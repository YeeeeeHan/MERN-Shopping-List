{"ast":null,"code":"import { v1 as uuid } from \"uuid\";\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from \"../actions/types\";\nconst initialState = {\n  items: [],\n  loading: false // In the process of getting data, will be set to true, once it gets back, set to false\n\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ITEMS:\n      return { ...state\n      };\n\n    case DELETE_ITEM:\n      return { ...state,\n        items: state.items.filter(item => item.id !== action.payload)\n      };\n\n    case ADD_ITEM:\n      return { ...state,\n        items: [action.payload, ...state.items]\n      };\n\n    case ITEMS_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/yeeeeehan/WebstormProjects/MERNstack/client/src/reducers/itemReducer.js"],"names":["v1","uuid","GET_ITEMS","ADD_ITEM","DELETE_ITEM","ITEMS_LOADING","initialState","items","loading","state","action","type","filter","item","id","payload"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,SAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0CC,aAA1C,QAA8D,kBAA9D;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU,CAEH;;AAFG,CAArB;AAMA,eAAe,UAAUC,KAAK,GAAGH,YAAlB,EAAgCI,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,SAAL;AACE,aAAO,EACL,GAAGO;AADE,OAAP;;AAGF,SAAKL,WAAL;AACE,aAAO,EACL,GAAGK,KADE;AAEHF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYK,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAA9C;AAFJ,OAAP;;AAIF,SAAKZ,QAAL;AACE,aAAM,EACJ,GAAGM,KADC;AAEJF,QAAAA,KAAK,EAAE,CAACG,MAAM,CAACK,OAAR,EAAiB,GAAGN,KAAK,CAACF,KAA1B;AAFH,OAAN;;AAIF,SAAKF,aAAL;AACE,aAAM,EACJ,GAAGI,KADC;AAEJD,QAAAA,OAAO,EAAE;AAFL,OAAN;;AAIF;AACE,aAAOC,KAAP;AArBJ;AAuBD","sourcesContent":["import { v1 as uuid } from \"uuid\";\nimport {GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from \"../actions/types\";\n\nconst initialState = {\n  items: [],\n  loading: false  // In the process of getting data, will be set to true, once it gets back, set to false\n\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ITEMS:\n      return {\n        ...state,\n      };\n    case DELETE_ITEM:\n      return {\n        ...state,\n          items: state.items.filter(item => item.id !== action.payload),\n      };\n    case ADD_ITEM:\n      return{\n        ...state,\n        items: [action.payload, ...state.items]\n      }\n    case ITEMS_LOADING:\n      return{\n        ...state,\n        loading: true\n      }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}